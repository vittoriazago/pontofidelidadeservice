// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PontoFidelidade.Persistence;

namespace PontoFidelidade.Persistence.Migrations
{
    [DbContext(typeof(PontoFidelidadeContexto))]
    [Migration("20190522032453_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPF")
                        .HasMaxLength(11);

                    b.Property<DateTime>("DataCadastro");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.ClienteMovimentacao", b =>
                {
                    b.Property<Guid>("ClienteMovimentacaoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClienteId");

                    b.Property<DateTime>("DataOperacao");

                    b.Property<Guid>("IdCliente");

                    b.Property<Guid>("IdLoja");

                    b.Property<Guid?>("LojaId");

                    b.Property<int>("Operacao");

                    b.Property<long>("SaldoAtual");

                    b.Property<long>("Valor");

                    b.HasKey("ClienteMovimentacaoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("LojaId");

                    b.ToTable("ClienteMovimentacao");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.ClientePontoFidelidade", b =>
                {
                    b.Property<Guid>("ClientePontoFidelidadeId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClienteId");

                    b.Property<DateTime>("DataOperacao");

                    b.Property<Guid>("IdCliente");

                    b.Property<Guid>("IdLoja");

                    b.Property<int>("Operacao");

                    b.Property<long>("Pontos");

                    b.Property<long>("SaldoAtual");

                    b.HasKey("ClientePontoFidelidadeId");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClientePontoFidelidade");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Fotografia.ClienteMovimentacaoFotografia", b =>
                {
                    b.Property<Guid>("ClienteMovimentacaoFotografiaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FotografiaMovimentacaoFotografiaId");

                    b.Property<Guid>("IdMovimentacaoFotografia");

                    b.HasKey("ClienteMovimentacaoFotografiaId");

                    b.HasIndex("FotografiaMovimentacaoFotografiaId");

                    b.ToTable("ClienteMovimentacaoFotografia");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Fotografia.ClientePontoFidelidadeFotografia", b =>
                {
                    b.Property<Guid>("ClientePontoFidelidadeFotografiaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FotografiaPontoFidelidadeFotografiaId");

                    b.Property<Guid>("IdPontoFidelidadeFotografia");

                    b.HasKey("ClientePontoFidelidadeFotografiaId");

                    b.HasIndex("FotografiaPontoFidelidadeFotografiaId");

                    b.ToTable("ClientePontoFidelidadeFotografia");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Fotografia.MovimentacaoFotografia", b =>
                {
                    b.Property<Guid>("MovimentacaoFotografiaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClienteId");

                    b.Property<DateTime>("DataFinalFotografia");

                    b.Property<DateTime>("DataInicialFotografia");

                    b.Property<Guid>("IdCliente");

                    b.Property<int>("QuantidadeOperacoes");

                    b.Property<decimal>("SaldoFinal");

                    b.Property<decimal>("SaldoInicial");

                    b.HasKey("MovimentacaoFotografiaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("MovimentacaoFotografia");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Fotografia.PontoFidelidadeFotografia", b =>
                {
                    b.Property<Guid>("PontoFidelidadeFotografiaId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClienteId");

                    b.Property<DateTime>("DataFinalFotografia");

                    b.Property<DateTime>("DataInicialFotografia");

                    b.Property<Guid>("IdCliente");

                    b.Property<int>("QuantidadeOperacoes");

                    b.Property<long>("SaldoFinal");

                    b.Property<long>("SaldoInicial");

                    b.HasKey("PontoFidelidadeFotografiaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("PontoFidelidadeFotografia");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Loja", b =>
                {
                    b.Property<Guid>("LojaId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(14);

                    b.Property<Guid>("ChaveIntegracao");

                    b.Property<string>("Codigo")
                        .HasMaxLength(999999);

                    b.Property<DateTime>("DataAbertura");

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("LojaId");

                    b.ToTable("Loja");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Ativo");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<Guid>("LojaId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.UsuarioRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.ClienteMovimentacao", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Cliente", "Cliente")
                        .WithMany("MovimentacoesDinheiro")
                        .HasForeignKey("ClienteId");

                    b.HasOne("PontoFidelidade.Domain.Models.Loja", "Loja")
                        .WithMany()
                        .HasForeignKey("LojaId");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.ClientePontoFidelidade", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Cliente", "Cliente")
                        .WithMany("MovimentacoesPontoFidelidade")
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Fotografia.ClienteMovimentacaoFotografia", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Fotografia.MovimentacaoFotografia", "Fotografia")
                        .WithMany("Movimentacoes")
                        .HasForeignKey("FotografiaMovimentacaoFotografiaId");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Fotografia.ClientePontoFidelidadeFotografia", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Fotografia.PontoFidelidadeFotografia", "Fotografia")
                        .WithMany("Movimentacoes")
                        .HasForeignKey("FotografiaPontoFidelidadeFotografiaId");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Fotografia.MovimentacaoFotografia", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Cliente")
                        .WithMany("ExtratosMovimentacao")
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.Fotografia.PontoFidelidadeFotografia", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Cliente")
                        .WithMany("ExtratosPontoFidelidade")
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("PontoFidelidade.Domain.Models.UsuarioRole", b =>
                {
                    b.HasOne("PontoFidelidade.Domain.Models.Role", "Role")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PontoFidelidade.Domain.Models.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
